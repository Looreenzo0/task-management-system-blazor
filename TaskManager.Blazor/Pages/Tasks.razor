@page "/tasks"
@using TaskManager.Blazor.Models
@using TaskManager.Blazor.Shared
@using Microsoft.AspNetCore.Components.Web
@using TaskManager.Blazor.Services
@inject TaskApiService ApiService
@inject ToastService ToastService


<div class="container mt-4">
    <h2>Task List</h2>
    <div class="mb-3 d-flex flex-wrap gap-2">
        <select class="form-select w-auto" @bind="statusFilter">
            <option value="">All Statuses</option>
            @foreach (var status in Enum.GetValues(typeof(TaskManager.Blazor.Models.TaskStatus)))
            {
                <option value="@status">@status</option>
            }
        </select>
        <select class="form-select w-auto" @bind="priorityFilter">
            <option value="">All Priorities</option>
            @foreach (var priority in Enum.GetValues(typeof(TaskManager.Blazor.Models.TaskPriority)))
            {
                <option value="@priority">@priority</option>
            }
        </select>
        <button class="btn btn-outline-secondary" @onclick="ToggleView">
            View as @((isCardView ? "Table" : "Cards"))
        </button>
        <button class="btn btn-primary" @onclick="ShowCreateForm">Add Task</button>
       
    </div>
    @if (isCardView)
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
            @foreach (var task in filteredList)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body">
                            <h5 class="card-title">@task.Title</h5>
                            <p class="card-text">@task.Description</p>
                            <span class="badge bg-@GetStatusColor(task.Status)">Status: @task.Status</span>
                            <span class="badge bg-@GetPriorityColor(task.Priority) ms-2">Priority: @task.Priority</span>
                            <p class="mt-2 small text-muted">Created: @task.CreatedDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="card-footer d-flex justify-content-end gap-2">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditTask(task)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(task)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <TaskList Tasks="filteredList"
                  OnSort="SortBy"
                  SortBy="sortBy"
                  SortAsc="sortAsc"
                  OnEdit="EditTask"
                  OnDelete="ConfirmDelete"
                  IsLoading="isLoading" />
    }

    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>
            <li class="page-item disabled"><span class="page-link">Page @currentPage</span></li>
            <li class="page-item @(currentPage* pageSize >= totalCount ? "disabled" : null)">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>

    <div class="modal fade @(showForm ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((selectedTask == null) ? "Add Task" : "Edit Task")</h5>
                    <button type="button" class="btn-close" @onclick="HideForm"></button>
                </div>
                <div class="modal-body">
                    <TaskForm Task="selectedTask" OnSaved="OnTaskSaved" OnCancelled="HideForm" />
                </div>
            </div>
        </div>
    </div>

    @if (showConfirm)
    {
        <ConfirmDialog Message="Are you sure you want to delete this task?" OnConfirmed="DeleteTaskConfirmed"
            OnCancelled="HideConfirm" />
    }
</div>

@code {
    // Filtering logic for table rendering
    private IEnumerable<TaskItem> filteredList => tasks;

    private List<TaskItem> tasks = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private bool isLoading = false;
    private string? statusFilter;
    private string? priorityFilter;
    private string? sortBy;
    private bool sortAsc = true;
    private bool showForm = false;
    private bool showConfirm = false;
    private TaskItem? selectedTask;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private bool isCardView = false;

    private void ToggleView()
    {
        isCardView = !isCardView;
    }


    private async Task LoadTasks()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            var (allTasks, count) = await ApiService.GetTasksAsync(currentPage, pageSize);
            var filtered = allTasks.AsQueryable();
            if (!string.IsNullOrEmpty(statusFilter) && Enum.TryParse<TaskManager.Blazor.Models.TaskStatus>(statusFilter, out var s))
                filtered = filtered.Where(t => t.Status == s);
            if (!string.IsNullOrEmpty(priorityFilter) && Enum.TryParse<TaskManager.Blazor.Models.TaskPriority>(priorityFilter, out
            var p))
                filtered = filtered.Where(t => t.Priority == p);
            if (!string.IsNullOrEmpty(sortBy))
            {
                filtered = sortBy switch
                {
                    nameof(TaskItem.Title) => sortAsc ? filtered.OrderBy(t => t.Title) : filtered.OrderByDescending(t => t.Title),
                    nameof(TaskItem.Status) => sortAsc ? filtered.OrderBy(t => t.Status) : filtered.OrderByDescending(t => t.Status),
                    nameof(TaskItem.Priority) => sortAsc ? filtered.OrderBy(t => t.Priority) : filtered.OrderByDescending(t => t.Priority),
                    nameof(TaskItem.CreatedDate) => sortAsc ? filtered.OrderBy(t => t.CreatedDate) : filtered.OrderByDescending(t =>
                    t.CreatedDate),
                    _ => filtered
                };
            }
            tasks = filtered.ToList();
            totalCount = count;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SortBy(string column)
    {
        if (sortBy == column)
            sortAsc = !sortAsc;
        else
        {
            sortBy = column;
            sortAsc = true;
        }
        await LoadTasks();
    }


    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            _ = LoadTasks();
        }
    }
    private void NextPage()
    {
        if (currentPage * pageSize < totalCount)
        {
            currentPage++;
            _ = LoadTasks();
        }
    }
    private void ShowCreateForm()
    {
        selectedTask = null;
        showForm = true;
    }
    private void EditTask(TaskItem task)
    {
        selectedTask = task;
        showForm = true;
    }
    private void HideForm()
    {
        showForm = false;
        selectedTask = null;
    }
    private async Task OnTaskSaved()
    {
        showForm = false;
        ToastService.ShowSuccess("Task saved successfully.");
        await LoadTasks();
    }
    private void ConfirmDelete(TaskItem task)
    {
        selectedTask = task;
        showConfirm = true;
    }
    private void HideConfirm()
    {
        showConfirm = false;
        selectedTask = null;
    }
    private async Task DeleteTaskConfirmed()
    {
        if (selectedTask != null)
        {
            var result = await ApiService.DeleteTaskAsync(selectedTask.Id);
            showConfirm = false;
            if (result)
                ToastService.ShowSuccess("Task deleted.");
            else
                ToastService.ShowError("Failed to delete task.");
            await LoadTasks();
        }
    }
    private string GetStatusColor(TaskManager.Blazor.Models.TaskStatus status) => status switch
    {
        TaskManager.Blazor.Models.TaskStatus.Todo => "secondary",
        TaskManager.Blazor.Models.TaskStatus.InProgress => "warning",
        TaskManager.Blazor.Models.TaskStatus.Done => "success",
        _ => "light"
    };
    private string GetPriorityColor(TaskManager.Blazor.Models.TaskPriority priority) => priority switch
    {
        TaskManager.Blazor.Models.TaskPriority.Low => "info",
        TaskManager.Blazor.Models.TaskPriority.Medium => "primary",
        TaskManager.Blazor.Models.TaskPriority.High => "danger",
        _ => "light"
    };
}
